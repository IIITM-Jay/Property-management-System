/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

eval("(function ($, undefined) {\n  'use strict';\n\n  var OFFSET = 5;\n\n  function Rating(element, options) {\n    this.$input = $(element);\n    this.$rating = $('<span></span>').css({\n      cursor: 'default'\n    }).insertBefore(this.$input);\n    // Merge data and parameter options.\n    // Those provided as parameter prevail over the data ones.\n    this.options = (function (opts) {\n      // Sanitize start, stop, step, and fractions.\n      // All of them start, stop, and step must be integers.\n      opts.start = parseInt(opts.start, 10);\n      opts.start = isNaN(opts.start) ? undefined : opts.start;\n      // In case we don't have a valid stop rate try to get a reasonable\n      // one based on the existence of a valid start rate.\n      opts.stop = parseInt(opts.stop, 10);\n      opts.stop = isNaN(opts.stop) ?\n        opts.start + OFFSET || undefined : opts.stop;\n      // 0 step is ignored.\n      opts.step = parseInt(opts.step, 10) || undefined;\n      // Symbol fractions and scale (number of significant digits).\n      // 0 is ignored and negative numbers are turned to positive.\n      opts.fractions = Math.abs(parseInt(opts.fractions, 10)) || undefined;\n      opts.scale = Math.abs(parseInt(opts.scale, 10)) || undefined;\n\n      // Extend/Override the default options with those provided either as\n      // data attributes or function parameters.\n      opts = $.extend({}, $.fn.rating.defaults, opts);\n      // Inherit default filled if none is defined for the selected symbol.\n      opts.filledSelected = opts.filledSelected || opts.filled;\n      return opts;\n    }($.extend({}, this.$input.data(), options)));\n\n    this._init();\n  };\n\n  Rating.prototype = {\n    _init: function () {\n      var this$1 = this;\n\n      var rating = this,\n          $input = this.$input,\n          $rating = this.$rating;\n\n      var ifEnabled = function (f) {\n        return function (e) {\n          // According to the W3C attribute readonly is not allowed on input\n          // elements with type hidden.\n          // Keep readonly prop for legacy but its use should be deprecated.\n          if (!$input.prop('disabled') && !$input.prop('readonly') &&\n              $input.data('readonly') === undefined) {\n            f.call(this, e);\n          }\n        }\n      };\n\n      // Build the rating control.\n      for (var i = 1; i <= this._rateToIndex(this.options.stop); i++) {\n        // Create the rating symbol container.\n        var $symbol = $('<div class=\"rating-symbol\"></div>').css({\n            display: 'inline-block',\n            position: 'relative'\n        });\n        // Add background symbol to the symbol container.\n        $('<div class=\"rating-symbol-background ' + this$1.options.empty + '\"></div>')\n          .appendTo($symbol);\n        // Add foreground symbol to the symbol container.\n        // The filled icon is wrapped with a div to allow fractional selection.\n        $('<div class=\"rating-symbol-foreground\"></div>')\n          .append('<span></span>')\n          .css({\n            display: 'inline-block',\n            position: 'absolute',\n            overflow: 'hidden',\n            left: 0,\n            // Overspecify right and left to 0 and let the container direction\n            // decide which one is going to take precedence according to the\n            // ltr/rtl direction.\n            // (https://developer.mozilla.org/en-US/docs/Web/CSS/right)\n            // When both the right CSS property and the left CSS property are\n            // defined, the position of the element is overspecified. In that\n            // case, the left value has precedence when the container is\n            // left-to-right (that is that the right computed value is set to\n            // -left), and the right value has precedence when the container is\n            // right-to-left (that is that the left computed value is set to\n            // -right).\n            right: 0,\n            width: 0\n          }).appendTo($symbol);\n        $rating.append($symbol);\n        this$1.options.extendSymbol.call($symbol, this$1._indexToRate(i));\n      }\n      // Initialize the rating control with the associated input value rate.\n      this._updateRate($input.val());\n\n      // Keep rating control and its associated input in sync.\n      $input\n        .on('change', function () {\n          rating._updateRate($(this).val());\n        });\n\n      var fractionalIndex = function (e) {\n        var $symbol = $(e.currentTarget);\n        // Calculate the distance from the mouse pointer to the origin of the\n        // symbol. We need to be careful with the CSS direction. If we are\n        // right-to-left then the symbol starts at the right. So we have to add\n        // the symbol width to the left offset to get the CSS rigth position.\n        var x = Math.abs((e.pageX || e.originalEvent.touches[0].pageX) -\n          (($symbol.css('direction') === 'rtl' && $symbol.width()) +\n          $symbol.offset().left));\n\n        // NOTE: When the mouse pointer is close to the left side of the symbol\n        // a negative x is returned. Probably some precision error in the\n        // calculation.\n        // x should never be less than 0 because this would mean that we are in\n        // the previous symbol.\n        x = x > 0 ? x : rating.options.scale * 0.1;\n        return $symbol.index() + x / $symbol.width();\n      };\n      // Keep the current highlighted index (fractional or not).\n      var index;\n      $rating\n        .on('mousedown touchstart', '.rating-symbol', ifEnabled(function (e) {\n          // Set input 'trigger' the change event.\n          $input.val(rating._indexToRate(fractionalIndex(e))).change();\n        }))\n        .on('mousemove touchmove', '.rating-symbol', ifEnabled(function (e) {\n          var current = rating._roundToFraction(fractionalIndex(e));\n          if (current !== index) {\n            // Trigger pseudo rate leave event if the mouse pointer is not\n            // leaving from another symbol (mouseleave).\n            if (index !== undefined) $(this).trigger('rating.rateleave');\n            // Update index and trigger rate enter event.\n            index = current;\n            $(this).trigger('rating.rateenter', [rating._indexToRate(index)]);\n          }\n          // Fill the symbols as fractions chunks.\n          rating._fillUntil(current);\n        }))\n        .on('mouseleave touchend', '.rating-symbol', ifEnabled(function () {\n          // When a symbol is left, reset index and trigger rate leave event.\n          index = undefined;\n          $(this).trigger('rating.rateleave');\n          // Restore on hover out.\n          rating._fillUntil(rating._rateToIndex(parseFloat($input.val())));\n        }));\n\n    },\n    // Fill rating symbols until index.\n    _fillUntil: function (index) {\n      var $rating = this.$rating;\n      // Get the index of the last whole symbol.\n      var i = Math.floor(index);\n      // Hide completely hidden symbols background.\n      $rating.find('.rating-symbol-background')\n        .css('visibility', 'visible')\n        .slice(0, i).css('visibility', 'hidden');\n      var $rates = $rating.find('.rating-symbol-foreground');\n      // Reset foreground\n      $rates.width(0);\n      // Fill all the foreground symbols up to the selected one.\n      $rates.slice(0, i).width('auto')\n        .find('span').attr('class', this.options.filled);\n      // Amend selected symbol.\n      $rates.eq(index % 1 ? i : i - 1)\n        .find('span').attr('class', this.options.filledSelected);\n      // Partially fill the fractional one.\n      $rates.eq(i).width(index % 1 * 100 + '%');\n    },\n    // Calculate the rate of an index according the the start and step.\n    _indexToRate: function (index) {\n      return this.options.start + Math.floor(index) * this.options.step +\n        this.options.step * this._roundToFraction(index % 1);\n    },\n    // Calculate the corresponding index for a rate.\n    _rateToIndex: function (rate) {\n      return (rate - this.options.start) / this.options.step;\n    },\n    // Round index to the configured opts.fractions.\n    _roundToFraction: function (index) {\n      // Get the closest top fraction.\n      var fraction = Math.ceil(index % 1 * this.options.fractions) / this.options.fractions;\n      // Truncate decimal trying to avoid float precission issues.\n      var p = Math.pow(10, this.options.scale);\n      return Math.floor(index) + Math.floor(fraction * p) / p;\n    },\n    // Check the rate is in the proper range [start..stop].\n    _contains: function (rate) {\n      var start = this.options.step > 0 ? this.options.start : this.options.stop;\n      var stop = this.options.step > 0 ? this.options.stop : this.options.start;\n      return start <= rate && rate <= stop;\n    },\n    // Update empty and filled rating symbols according to a rate.\n    _updateRate: function (rate) {\n      var value = parseFloat(rate);\n      if (this._contains(value)) {\n        this._fillUntil(this._rateToIndex(value));\n        this.$input.val(value);\n      } else if (rate === '') {\n        this._fillUntil(0);\n        this.$input.val('');\n      }\n    },\n    rate: function (value) {\n      if (value === undefined) {\n        return this.$input.val();\n      }\n      this._updateRate(value);\n    }\n  };\n\n  $.fn.rating = function (options) {\n    var args = Array.prototype.slice.call(arguments, 1),\n        result;\n    this.each(function () {\n      var $input = $(this);\n      var rating = $input.data('rating');\n      if (!rating) {\n        $input.data('rating', (rating = new Rating(this, options)));\n      }\n      // Underscore are used for private methods.\n      if (typeof options === 'string' && options[0] !== '_') {\n        result = rating[options].apply(rating, args);\n      }\n    });\n    return result !== undefined ? result : this;\n  };\n\n  // Plugin defaults.\n  $.fn.rating.defaults = {\n    filled: 'glyphicon glyphicon-star',\n    filledSelected: undefined,\n    empty: 'glyphicon glyphicon-star-empty',\n    start: 0,\n    stop: OFFSET,\n    step: 1,\n    fractions: 1,\n    scale: 3,\n    extendSymbol: function (rate) {},\n  };\n\n  $(function () {\n    $('input.rating').rating();\n  });\n}(jQuery));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);
